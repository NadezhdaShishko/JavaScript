// Задание 1. С помощью цикла while вывести все простые числа в промежутке от 0 до 100.

    var nMax = 100;
    var n = 2; // простое число n>1 и оно ни на что не делится, кроме себя и 1. Значит у него при делении на любое число от 2 до n-1 есть остаток
    var x; // число от 2 до n-1, на которое будем делить для проверки

    nextPrime:
        while (n < nMax) {
            n++;
            x = 2;
        
            while (x < n) {
            if (n % x == 0) continue nextPrime;
            x++;           
        }

        console.log(n);
    }

/* Задание 2. С этого урока начинаем работать с функционалом интернет-магазина. Предположим, есть сущность корзины. 
Нужно реализовать функционал подсчета стоимости корзины в зависимости от находящихся в ней товаров. */
/* Задание 3. Товары в корзине хранятся в массиве. Задачи:
a) Организовать такой массив для хранения товаров в корзине;
b) Организовать функцию countBasketPrice, которая будет считать стоимость корзины. */

var allProducts = [
	{name: 'свитер', price: 600},
    {name: 'блузка', price: 500},
    {name: 'брюки', price: 1100},
    {name: 'топ', price: 200},
    {name: 'юбка', price: 800},
    {name: 'шорты', price: 400}
];

var cart = []; // карзина покупок
cart.push(allProducts[0], allProducts[2], allProducts[5])

function countBasketPrice() {
    var summ = 0;

    var i = 0;                          // можно использовать цикл for(i = 0; i < cart.length; i++)
    while(i < cart.length) {
        // console.log(cart[i].price);
        summ += cart[i].price;
        i++;
    }
    return summ;
}
console.log(countBasketPrice());

/* Задание 4. *Вывести с помощью цикла for числа от 0 до 9, не используя тело цикла. Выглядеть это должно так:
for(…){// здесь пусто} */

for (var i = 0; i <= 9; console.log(i++)) {}

/* Задание 5. *Нарисовать пирамиду с помощью console.log, как показано на рисунке, только у вашей пирамиды должно быть 20 рядов, а не 5:
x
xx
xxx
xxxx
xxxxx */

var str = '';
for (; str.length < 20;) {
    str = str + 'x';
    console.log(str);
}